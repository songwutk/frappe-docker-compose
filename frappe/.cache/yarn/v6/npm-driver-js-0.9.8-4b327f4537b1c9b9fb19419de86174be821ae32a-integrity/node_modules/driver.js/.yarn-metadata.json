{
  "manifest": {
    "name": "driver.js",
    "version": "0.9.8",
    "description": "A light-weight, no-dependency, vanilla JavaScript library to drive the user's focus across the page",
    "main": "dist/driver.min.js",
    "types": "types/index.d.ts",
    "scripts": {
      "start": "node server.js",
      "build-demo": "NODE_ENV=production webpack --config config/webpack.config.demo.js",
      "build": "webpack --config config/webpack.config.prod.js",
      "deploy-demo": "NODE_DEBUG=gh-pages gh-pages -d dist/demo"
    },
    "bugs": {
      "url": "https://github.com/kamranahmedse/driver.js/issues"
    },
    "homepage": "https://github.com/kamranahmedse/driver.js#readme",
    "repository": {
      "type": "git",
      "url": "https://github.com/kamranahmedse/driver.js"
    },
    "author": {
      "name": "Kamran Ahmed",
      "email": "kamranahmed.se@gmail.com"
    },
    "license": "MIT",
    "devDependencies": {
      "@babel/core": "^7.4.5",
      "@babel/plugin-proposal-object-rest-spread": "^7.4.4",
      "@babel/preset-env": "^7.4.5",
      "babel-eslint": "^10.0.1",
      "babel-loader": "^8.0.6",
      "copy-webpack-plugin": "^5.0.3",
      "css-loader": "^3.0.0",
      "cssnano": "^4.1.10",
      "eslint": "^5.16.0",
      "eslint-config-airbnb-base": "^13.1.0",
      "eslint-loader": "^2.1.2",
      "eslint-plugin-import": "^2.17.3",
      "eslint-plugin-node": "^9.1.0",
      "extract-loader": "^3.1.0",
      "extract-text-webpack-plugin": "next",
      "file-loader": "^4.0.0",
      "gh-pages": "^2.0.1",
      "html-webpack-plugin": "^3.2.0",
      "node-sass": "^4.12.0",
      "opn": "^6.0.0",
      "optimize-css-assets-webpack-plugin": "^5.0.1",
      "postcss-loader": "^3.0.0",
      "sass-loader": "^7.1.0",
      "style-loader": "^0.23.1",
      "webpack": "^4.34.0",
      "webpack-cli": "^3.3.4",
      "webpack-dev-server": "^3.7.1"
    },
    "dependencies": {},
    "_registry": "npm",
    "_loc": "/home/frappe/.cache/yarn/v6/npm-driver-js-0.9.8-4b327f4537b1c9b9fb19419de86174be821ae32a-integrity/node_modules/driver.js/package.json",
    "readmeFilename": "readme.md",
    "readme": "<h1 align=\"center\"><img height=\"150\" src=\"./demo/images/driver.png\" /><br> Driver.js</h1>\n\n<p align=\"center\">\n  <a href=\"https://github.com/kamranahmedse/driver.js/blob/master/license\">\n    <img src=\"https://img.shields.io/badge/License-MIT-yellow.svg\" />\n  </a>\n  <a href=\"https://npmjs.org/package/driver.js\">\n    <img src=\"https://img.shields.io/npm/v/driver.js.svg\" alt=\"version\" />\n  </a>\n  <a href=\"https://npmjs.org/package/driver.js\">\n    <img src=\"https://img.shields.io/npm/dm/driver.js.svg\" alt=\"downloads\" />\n  </a>\n</p>\n\n<p align=\"center\">\n  <b>Powerful yet light-weight, vanilla JavaScript engine to drive the user's focus across the page</b></br>\n  <sub>Only ~4kb, no external dependency, supports all major browsers and highly customizable <sub>\n</p>\n\n<br />\n\n* **Simple**: is simple to use and has no external dependency at all\n* **Light-weight**: ~4kb in size, vanilla JavaScript and no external dependency\n* **Highly customizable**: has a powerful API and can be used however you want\n* **Highlight anything**: highlight any (literally any) element on page\n* **Feature introductions**: create powerful feature introductions for your web applications\n* **Focus shifters**: add focus shifters for users\n* **User friendly**: Everything is controllable by keyboard\n* **Consistent behavior**: usable across all browsers (including in-famous IE)\n* **MIT Licensed**: free for personal and commercial use\n\n![](./demo/images/split.png)\n\nFor Usage and Examples, [have a look at demo](http://kamranahmed.info/driver.js)\n\n## So, yet another tour library?\n\n**No**, it is not. **Tours are just one of the many use-cases**. Driver.js can be used wherever you need some sort of overlay for the page; some common usecases could be: e.g. dimming the background when user is interacting with some component i.e. [the way Facebook does](https://i.imgur.com/Q3PzaKkr.png) when you try to create a post, using it as a focus shifter to bring user's attention to some component on page, or using it to simulate those \"Turn off the Lights\" widgets that you might have seen on video players online, etc.\n\nDriver.js is written in Vanilla JS, has zero dependencies and is highly customizable. It has several options allowing you to manipulate how it behaves and also **provides you the hooks** to manipulate the elements as they are highlighted, about to be highlighted, or deselected.\n\n## Installation\n\nYou can install it using `yarn` or `npm`, whatever you prefer.\n\n```bash\nyarn add driver.js\nnpm install driver.js\n```\nOr include it using CDN. If you want a specific version, put it as `driver.js@0.5` in the name\n```html\n<script src=\"https://unpkg.com/driver.js/dist/driver.min.js\"></script>\n<link rel=\"stylesheet\" href=\"https://unpkg.com/driver.js/dist/driver.min.css\">\n```\n\nOr grab the code from `dist` directory and include it directly.\n\n```html\n<link rel=\"stylesheet\" href=\"/dist/driver.min.css\">\n<script src=\"/dist/driver.min.js\"></script>\n```\n\n![](./demo/images/split.png)\n\n## Usage and Demo\n\nIf you are using some sort of module bundler, import the library and the CSS file\n\n```javascript\nimport Driver from 'driver.js';\nimport 'driver.js/dist/driver.min.css';\n```\notherwise use the `script` and `link` tags to import the JavaScript and CSS files.\n\nDemos and many more usage examples can be found [in the docs page](http://kamranahmed.info/driver.js).\n\n### Highlighting Single Element – [Demo](http://kamranahmed.info/driver.js#single-element-no-popover)\n\nYou can highlight a single element by simply passing the selector.\n\n```javascript\nconst driver = new Driver();\ndriver.highlight('#create-post');\n```\nA real world usage example for this is: using it to dim the background and highlight the required element e.g. the way Facebook does it when creating a post.\n\n### Highlight and Popover – [Demo](http://kamranahmed.info/driver.js#single-element-with-popover)\n\nYou can show additional details beside the highlighted element using the popover.\n\n```javascript\nconst driver = new Driver();\ndriver.highlight({\n  element: '#some-element',\n  popover: {\n    title: 'Title for the Popover',\n    description: 'Description for it',\n  }\n});\n```\n\nAlso, `title` and `description` can have HTML as well.\n\n### Positioning the Popover – [Demo](http://kamranahmed.info/driver.js#single-element-with-popover-position)\n\nBy default, driver automatically finds the suitable position for the popover and displays it. You can override it using `position` property.\n\n```javascript\nconst driver = new Driver();\ndriver.highlight({\n  element: '#some-element',\n  popover: {\n    title: 'Title for the Popover',\n    description: 'Description for it',\n    // position can be left, left-center, left-bottom, top,\n    // top-center, top-right, right, right-center, right-bottom,\n    // bottom, bottom-center, bottom-right, mid-center\n    position: 'left',\n  }\n});\n```\n\nYou can also add offset to the popover position by using the `offset` property\n\n```javascript\nconst driver = new Driver();\ndriver.highlight({\n  element: '#some-element',\n  popover: {\n    title: 'Title for the Popover',\n    description: 'Description for it',\n    position: 'bottom',\n    // Will show it 20 pixels away from the actual position of popover\n    // You may also provide the negative values\n    offset: 20,\n  }\n});\n```\n\n### Creating Feature Introductions – [Demo](http://kamranahmed.info/driver.js)\n\nFeature introductions are helpful when onboarding new users and giving them an idea about different parts of the application; you can create them seamlessly with Driver. Define the steps and call the `start` when you want to start presenting. User will be able to control the steps using the keyboard or using the buttons on popovers.\n\n```javascript\nconst driver = new Driver();\n\n// Define the steps for introduction\ndriver.defineSteps([\n  {\n    element: '#first-element-introduction',\n    popover: {\n      className: 'first-step-popover-class',\n      title: 'Title on Popover',\n      description: 'Body of the popover',\n      position: 'left'\n    }\n  },\n  {\n    element: '#second-element-introduction',\n    popover: {\n      title: 'Title on Popover',\n      description: 'Body of the popover',\n      position: 'top'\n    }\n  },\n  {\n    element: '#third-element-introduction',\n    popover: {\n      title: 'Title on Popover',\n      description: 'Body of the popover',\n      position: 'right'\n    }\n  },\n]);\n\n// Start the introduction\ndriver.start();\n```\nYou can also hide the buttons and control the introductions programmatically by using the API methods listed below.\n\n![](./demo/images/split.png)\n\n### Asynchronous Actions – [Demo](http://kamranahmed.info/driver.js)\n\nFor any asynchronous actions between the transition steps, you may delay the execution till the action completes. All you have to do is stop the transition using `driver.preventMove()` in your `onNext` or `onPrevious` callbacks and initiate it manually using `driver.moveNext()`. Here is a sample implementation where it will stop at the second step for four seconds and then move on to the next step.\n\n```javascript\nconst driver = new Driver();\n\n// Define the steps for introduction\ndriver.defineSteps([\n  {\n    element: '#first-element-introduction',\n    popover: {\n      title: 'Title on Popover',\n      description: 'Body of the popover',\n      position: 'left'\n    }\n  },\n  {\n    element: '#second-element-introduction',\n    popover: {\n      title: 'Title on Popover',\n      description: 'Body of the popover',\n      position: 'top'\n    },\n    onNext: () => {\n      // Prevent moving to the next step\n      driver.preventMove();\n      \n      // Perform some action or create the element to move to\n      // And then move to that element\n      setTimeout(() => {\n        driver.moveNext();\n      }, 4000);\n    }\n  },\n  {\n    element: '#third-element-introduction',\n    popover: {\n      title: 'Title on Popover',\n      description: 'Body of the popover',\n      position: 'right'\n    }\n  },\n]);\n\n// Start the introduction\ndriver.start();\n```\nYou can also hide the buttons and control the introductions programmatically by using the API methods listed below.\n\n![](./demo/images/split.png)\n\n## API\n\nDriver comes with several options that you can manipulate to make Driver behave as you like\n\n### Driver Definition\n\nHere are the options that Driver understands:\n\n```javascript\nconst driver = new Driver({\n  className: 'scoped-class',        // className to wrap driver.js popover\n  animate: true,                    // Whether to animate or not\n  opacity: 0.75,                    // Background opacity (0 means only popovers and without overlay)\n  padding: 10,                      // Distance of element from around the edges\n  allowClose: true,                 // Whether the click on overlay should close or not\n  overlayClickNext: false,          // Whether the click on overlay should move next\n  doneBtnText: 'Done',              // Text on the final button\n  closeBtnText: 'Close',            // Text on the close button for this step\n  stageBackground: '#ffffff',       // Background color for the staged behind highlighted element\n  nextBtnText: 'Next',              // Next button text for this step\n  prevBtnText: 'Previous',          // Previous button text for this step\n  showButtons: false,               // Do not show control buttons in footer\n  keyboardControl: true,            // Allow controlling through keyboard (escape to close, arrow keys to move)\n  scrollIntoViewOptions: {},        // We use `scrollIntoView()` when possible, pass here the options for it if you want any\n  onHighlightStarted: (Element) => {}, // Called when element is about to be highlighted\n  onHighlighted: (Element) => {},      // Called when element is fully highlighted\n  onDeselected: (Element) => {},       // Called when element has been deselected\n  onReset: (Element) => {},            // Called when overlay is about to be cleared\n  onNext: (Element) => {},                    // Called when moving to next step on any step\n  onPrevious: (Element) => {},                // Called when moving to previous step on any step\n});\n```\nNote that all the button options that you provide in the driver definition can be overridden for a specific step by giving them in the step definition\n\n### Step Definition\n\nHere are the set of options that you can pass while defining steps `defineSteps` or the object that you pass to `highlight` method:\n\n```javascript\nconst stepDefinition = {\n  element: '#some-item',        // Query selector string or Node to be highlighted\n  stageBackground: '#ffffff',   // This will override the one set in driver\n  popover: {                    // There will be no popover if empty or not given\n    className: 'popover-class', // className to wrap this specific step popover in addition to the general className in Driver options\n    title: 'Title',             // Title on the popover\n    description: 'Description', // Body of the popover\n    showButtons: false,         // Do not show control buttons in footer\n    doneBtnText: 'Done',        // Text on the last button\n    closeBtnText: 'Close',      // Text on the close button\n    nextBtnText: 'Next',        // Next button text\n    prevBtnText: 'Previous',    // Previous button text\n  },\n  onNext: () => {},             // Called when moving to next step from current step\n  onPrevious: () => {},         // Called when moving to previous step from current step\n};\n```\n\nFor example, here is how it would look when highlighting a single element:\n\n```javascript\nconst driver = new Driver(driverOptions);\ndriver.highlight(stepDefinition);\n```\n\nAnd this is how it would look when creating a step by step guide:\n\n```javascript\nconst driver = new Driver(driverOptions);\ndriver.defineSteps([\n    stepDefinition1,\n    stepDefinition2,\n    stepDefinition3,\n    stepDefinition4,\n]);\n```\n\n### API Methods\n\nBelow are the set of methods that are available:\n\n```javascript\nconst driver = new Driver(driverOptions);\n\n// Checks if the driver is active or not\nif (driver.isActivated) {\n    console.log('Driver is active');\n}\n\n// In case of the steps guide, you can call below methods\ndriver.defineSteps([ stepDefinition1, stepDefinition2, stepDefinition3 ]);\ndriver.start(stepNumber = 0);  // Starts driving through the defined steps\ndriver.moveNext();             // Moves to next step in the steps list\ndriver.movePrevious();         // Moves to previous step in the steps list\ndriver.hasNextStep();          // Checks if there is next step to move to\ndriver.hasPreviousStep();      // Checks if there is previous step to move to\n\n// Prevents the current move. Useful in `onNext` or `onPrevious` if you want to\n// perform some asynchronous task and manually move to next step\ndriver.preventMove();\n\n// Highlights the element using query selector or the step definition\ndriver.highlight(string|stepDefinition);\n\n// Reposition the popover and highlighted element\ndriver.refresh();\n\n// Resets the overlay and clears the screen\ndriver.reset();\n\n// Additionally you can pass a boolean parameter\n// to clear immediately and not do the animations etc\n// Could be useful when you, let's say, want to run\n// a different instance of driver while one was running\ndriver.reset(clearImmediately = false);\n\n// Checks if there is any highlighted element\nif(driver.hasHighlightedElement()) {\n    console.log('There is an element highlighted');\n}\n\n// Gets the currently highlighted element on screen\n// It would be an instance of `/src/core/element.js`\nconst activeElement = driver.getHighlightedElement();\n\n// Gets the last highlighted element, would be an instance of `/src/core/element.js`\nconst lastActiveElement = driver.getLastHighlightedElement();\n\nactiveElement.getCalculatedPosition(); // Gets screen co-ordinates of the active element\nactiveElement.hidePopover();           // Hide the popover\nactiveElement.showPopover();           // Show the popover\n\nactiveElement.getNode();  // Gets the DOM Element behind this element\n```\n\n![](./demo/images/split.png)\n\n**Note –** Do not forget to add `e.stopPropagation()` to the `click` binding that triggers driver.\n\n![](./demo/images/split.png)\n\n## Contributions\n\nFeel free to submit pull requests, create issues or spread the word.\n\n## Sponsored By\n\nThanks to [BrowserStack](https://browserstack.com) for sponsoring the compatibility testing needs.\n\n[![BrowserStack](./demo/images/browserstack.png)](https://www.browserstack.com)\n\n## License\n\nMIT &copy; [Kamran Ahmed](https://twitter.com/kamranahmedse)\n\n\n",
    "licenseText": "The MIT License\n\nCopyright (c) Kamran Ahmed\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE."
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/driver.js/-/driver.js-0.9.8.tgz#4b327f4537b1c9b9fb19419de86174be821ae32a",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/driver.js/-/driver.js-0.9.8.tgz",
    "hash": "4b327f4537b1c9b9fb19419de86174be821ae32a",
    "integrity": "sha512-bczjyKdX6XmFyCDkwtRmlaORDwfBk1xXmRO0CAe5VwNQTM98aWaG2LAIiIdTe53iV/B7W5lXlIy2xYtf0JRb7Q==",
    "registry": "npm",
    "packageName": "driver.js",
    "cacheIntegrity": "sha512-bczjyKdX6XmFyCDkwtRmlaORDwfBk1xXmRO0CAe5VwNQTM98aWaG2LAIiIdTe53iV/B7W5lXlIy2xYtf0JRb7Q== sha1-SzJ/RTexybn7GUGd6GF0voIa4yo="
  },
  "registry": "npm",
  "hash": "4b327f4537b1c9b9fb19419de86174be821ae32a"
}