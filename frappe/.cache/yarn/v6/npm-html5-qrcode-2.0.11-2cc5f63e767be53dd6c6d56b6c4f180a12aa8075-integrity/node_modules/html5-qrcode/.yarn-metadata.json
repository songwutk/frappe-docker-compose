{
  "manifest": {
    "name": "html5-qrcode",
    "version": "2.0.11",
    "description": "A cross platform HTML5 QR Code & bar code scanner",
    "main": "dist/html5-qrcode.min.js",
    "scripts": {
      "build-windows": "scripts\\build-windows.sh",
      "build": "./scripts/build-default.sh",
      "test": "./scripts/test.sh",
      "lint-md": "remark ."
    },
    "repository": {
      "type": "git",
      "url": "git+https://github.com/mebjas/html5-qrcode.git"
    },
    "keywords": [
      "html5",
      "qrcode",
      "html",
      "camera",
      "scanner"
    ],
    "author": {
      "name": "minhazav@gmail.com"
    },
    "license": "Apache-2.0",
    "bugs": {
      "url": "https://github.com/mebjas/html5-qrcode/issues"
    },
    "homepage": "https://github.com/mebjas/html5-qrcode#readme",
    "devDependencies": {
      "@babel/cli": "^7.10.5",
      "@babel/core": "^7.11.4",
      "@babel/plugin-proposal-class-properties": "^7.10.4",
      "@babel/preset-env": "^7.11.0",
      "babel-minify": "^0.5.1",
      "chai": "^4.2.0",
      "expose-loader": "^2.0.0",
      "mocha": "^7.2.0",
      "mocha-phantomjs": "^4.1.0",
      "phantomjs": "^2.1.7",
      "promise-polyfill": "^8.1.3",
      "remark-cli": "^9.0.0",
      "remark-preset-lint-recommended": "^5.0.0",
      "rewire": "^5.0.0",
      "ts-loader": "^9.1.2",
      "webpack": "^5.37.0",
      "webpack-cli": "^4.7.0",
      "typescript": "^4.3.2"
    },
    "remarkConfig": {
      "plugins": [
        "remark-preset-lint-recommended"
      ]
    },
    "files": [
      "dist/*"
    ],
    "_registry": "npm",
    "_loc": "/home/frappe/.cache/yarn/v6/npm-html5-qrcode-2.0.11-2cc5f63e767be53dd6c6d56b6c4f180a12aa8075-integrity/node_modules/html5-qrcode/package.json",
    "readmeFilename": "README.md",
    "readme": "# Html5-QRCode \n## (supports barcodes now :))\nA cross-platform HTML5 QR code & barcode reader.\n\nUse this lightweight library to easily / quickly integrate QR code, bar code, and other common code scanning capabilities to your web application. \n-   Supports easy scanning using an integrated webcam or camera in smartphones (Android / IOS).\n\n-   Supports scanning codes from files or default cameras on smartphones.\n\n-   **<u>Recently Added</u>**  Supports bar code scanning in various formats.\n\n-   Supports two kind of APIs\n    -   `Html5QrcodeScanner` - End-to-end scanner with UI, integrate with less than ten lines of code.\n    -   `Html5Qrcode` - Powerful set of APIs you can use to build your UI without worrying about camera setup, handling permissions, reading codes, etc.\n\n> Support for scanning local files on the device is a new addition and helpful for the web browser which does not support inline web-camera access in smartphones. **Note:** This doesn't upload files to any server - everything is done locally.\n\n[![Build Status](https://travis-ci.org/mebjas/html5-qrcode.svg?branch=master)](https://travis-ci.org/mebjas/html5-qrcode) [![GitHub issues](https://img.shields.io/github/issues/mebjas/html5-qrcode)](https://github.com/mebjas/html5-qrcode/issues) [![GitHub tag (latest by date)](https://img.shields.io/github/v/tag/mebjas/html5-qrcode)](https://github.com/mebjas/html5-qrcode/releases) ![GitHub](https://img.shields.io/github/license/mebjas/html5-qrcode) [![Codacy Badge](https://app.codacy.com/project/badge/Grade/51e4f0ef8b0b42e1b93ce29875dd23a0)](https://www.codacy.com/gh/mebjas/html5-qrcode/dashboard?utm_source=github.com&amp;utm_medium=referral&amp;utm_content=mebjas/html5-qrcode&amp;utm_campaign=Badge_Grade)\n\n[![npm](https://nodei.co/npm/html5-qrcode.png)](https://www.npmjs.com/package/html5-qrcode)\n\n| <img src=\"./assets/pixel3.gif\" width=\"200px\"> | <img src=\"./assets/pixel4_barcode_480.gif\" width=\"180px\">|\n| -- | -- |\n| _Figure: Running on Android, Pixel 3_ | _Figure: Running on Android, Pixel 4, **Scanning different types of codes**_  |\n\n## Notice\n**UX/UXD/UXR help wanted**: We are looking to improve user experience of this code scanning library - if you are interested in making this experience better for both developers and end users, please share your ideas, thoughts, inputs in [this discussion](https://github.com/mebjas/html5-qrcode/discussions/213)\n\n## Supported platforms\nWe are working continuously on adding support for more and more platforms. If you find a platform or a browser where the library is not working, please feel free to file an issue. Check the [demo link](https://blog.minhazav.dev/research/html5-qrcode.html) to test it out.\n\n**Legends**\n-   ![](assets/done.png) Means full support - inline webcam and file based \n-   ![](assets/partial.png) Means partial support - only file based, webcam in progress\n\n### PC / Mac\n\n| <img src=\"https://raw.githubusercontent.com/alrra/browser-logos/master/src/firefox/firefox_48x48.png\" alt=\"Firefox\" width=\"24px\" height=\"24px\" /><br/>Firefox | <img src=\"https://raw.githubusercontent.com/alrra/browser-logos/master/src/chrome/chrome_48x48.png\" alt=\"Chrome\" width=\"24px\" height=\"24px\" /><br/>Chrome | <img src=\"https://raw.githubusercontent.com/alrra/browser-logos/master/src/safari/safari_48x48.png\" alt=\"Safari\" width=\"24px\" height=\"24px\" /><br/>Safari | <img src=\"https://raw.githubusercontent.com/alrra/browser-logos/master/src/opera/opera_48x48.png\" alt=\"Opera\" width=\"24px\" height=\"24px\" /><br/>Opera | <img src=\"https://raw.githubusercontent.com/alrra/browser-logos/master/src/edge/edge_48x48.png\" alt=\"Edge\" width=\"24px\" height=\"24px\" /><br/> Edge\n| --------- | --------- | --------- | --------- | ------- |\n|![](./assets/done.png)| ![](assets/done.png)| ![](assets/done.png)| ![](assets/done.png) | ![](assets/done.png)\n\n### Android\n\n| <img src=\"https://raw.githubusercontent.com/alrra/browser-logos/master/src/chrome/chrome_48x48.png\" alt=\"Chrome\" width=\"24px\" height=\"24px\" /><br/>Chrome | <img src=\"https://raw.githubusercontent.com/alrra/browser-logos/master/src/firefox/firefox_48x48.png\" alt=\"Firefox\" width=\"24px\" height=\"24px\" /><br/>Firefox | <img src=\"https://raw.githubusercontent.com/alrra/browser-logos/master/src/edge/edge_48x48.png\" alt=\"Edge\" width=\"24px\" height=\"24px\" /><br/> Edge | <img src=\"https://raw.githubusercontent.com/alrra/browser-logos/master/src/opera/opera_48x48.png\" alt=\"Opera\" width=\"24px\" height=\"24px\" /><br/>Opera | <img src=\"https://raw.githubusercontent.com/alrra/browser-logos/master/src/opera-mini/opera-mini_48x48.png\" alt=\"Opera-Mini\" width=\"24px\" height=\"24px\" /><br/> Opera Mini | <img src=\"https://raw.githubusercontent.com/alrra/browser-logos/master/src/uc/uc_24x24.png\" alt=\"UC\" width=\"24px\" height=\"24px\" /> <br/> UC\n| --------- | --------- | --------- | --------- |  --------- | --------- |\n|![](./assets/done.png)| ![](assets/done.png)| ![](assets/done.png)| ![](assets/done.png)| ![](assets/partial.png) | ![](assets/partial.png) \n\n### IOS\n\n| <img src=\"https://raw.githubusercontent.com/alrra/browser-logos/master/src/safari-ios/safari-ios_24x24.png\" alt=\"Safari\" width=\"24px\" height=\"24px\" /><br/>Safari | <img src=\"https://raw.githubusercontent.com/alrra/browser-logos/master/src/chrome/chrome_48x48.png\" alt=\"Chrome\" width=\"24px\" height=\"24px\" /><br/>Chrome | <img src=\"https://raw.githubusercontent.com/alrra/browser-logos/master/src/firefox/firefox_48x48.png\" alt=\"Firefox\" width=\"24px\" height=\"24px\" /><br/>Firefox | <img src=\"https://raw.githubusercontent.com/alrra/browser-logos/master/src/edge/edge_48x48.png\" alt=\"Edge\" width=\"24px\" height=\"24px\" /><br/> Edge \n| --------- | --------- | --------- | --------- |\n|![](./assets/done.png)| ![](assets/partial.png)| ![](assets/partial.png)| ![](assets/partial.png) \n\n> Apparently, Webkit for IOS is used by Chrome, Firefox, and other browsers in IOS and they do not have webcam permissions yet. There is an ongoing issue on fixing the support for iOS - [issue/14](https://github.com/mebjas/html5-qrcode/issues/14)\n\n### Framework support\nThe library can be easily used with several other frameworks, I have been adding examples for a few of them and would continue to add more.\n\n|<img src=\"./assets/html5.png\" width=\"30px\">| <img src=\"./assets/vuejs.png\" width=\"30px\">|<img src=\"./assets/electron.png\" width=\"30px\"> | <img src=\"./assets/react.svg\" width=\"30px\">\n| -------- | -------- | -------- | -------- |\n| [Html5](./examples/html5) | [VueJs](./examples/vuejs) | [ElectronJs](./examples/electron) | [React](./examples/react)\n\n### Supported Code formats\nCode scanning is dependent on [Zxing-js](https://github.com/zxing-js/library) library. We will be working on top of it to add support for more types of code scanning. If you feel a certain type of code would be helpful to have, please file a feature request.\n\n| Code | Example |\n| ---- | ----- |\n| QR Code | <img src=\"./assets/qr-code.png\" width=\"200px\"> |\n| AZTEC | <img src=\"./assets/aztec.png\" > |\n| CODE_39|  <img src=\"./assets/code_39.gif\" > |\n| CODE_93| <img src=\"./assets/code_93.gif\" >|\n| CODE_128| <img src=\"./assets/code_128.gif\" >|\n| ITF| <img src=\"./assets/itf.png\" >|\n| EAN_13|<img src=\"./assets/ean13.jpeg\" > |\n| EAN_8| <img src=\"./assets/ean8.jpeg\" >|\n| PDF_417| <img src=\"./assets/pdf417.png\" >|\n| UPC_A| <img src=\"./assets/upca.jpeg\" >|\n| UPC_E| <img src=\"./assets/upce.jpeg\" >|\n| DATA_MATRIX|<img src=\"./assets/datamatrix.png\" > |\n| MAXICODE*| <img src=\"./assets/maxicode.gif\" > |\n| RSS_14*| <img src=\"./assets/rss14.gif\" >|\n| RSS_EXPANDED*|<img src=\"./assets/rssexpanded.gif\" > |\n\n> *Formats are not supported by our experimental integration with native\n> BarcodeDetector API integration ([Read more](/experimental.md)).\n\n## Description - [View Demo](https://blog.minhazav.dev/research/html5-qrcode.html)\n\nThis is a cross-platform Javascript library to integrate QR code, bar codes & a few other types of code scanning capabilities to your applications running on HTML5 compatible browser.\n\nSupports:\n-   Querying camera on the device (with user permissions)\n-   Rendering live camera feed, with easy to use user interface for scanning\n-   Supports scanning a different kind of QR codes, bar codes and other formats\n-   Supports selecting image files from the device for scanning codes\n\n## How to use\n> For full information [read this article](https://blog.minhazav.dev/HTML5-QR-Code-scanning-launched-v1.0.1/).\n\nDownload the script from [release page](https://github.com/mebjas/html5-qrcode/releases) or `npm` with:\n```sh\nnpm i html5-qrcode\n```\n\nAdd an element you want to use as a placeholder for QR Code scanner\n```html\n<div id=\"reader\" width=\"600px\"></div>\n```\n> Ideally do not set the height of this container as the height should depend on the height of the video feed from the camera. The library would honor the existing width, otherwise apply the default width. The height is derived from the aspect ratio of the video feed.\n\nAdd `minified/html5-qrcode.min.js` in your web page. \n> I would recommend using the minified version as it's transformed to standard javascript. The `html5-qrcode.js` is written with ECMAScript and may not be supported in the older version of the browsers. I wrote in this as it's easier to maintain!\n\n```html\n<script src=\"./minified/html5-qrcode.js\"></script>\n<!--\n  Or use directly from Github\n\n<script src=\"https://raw.githubusercontent.com/mebjas/html5-qrcode/master/minified/html5-qrcode.min.js\"></script>\n-->\n```\n\n### Easy Mode - With end to end scanner user interface\n`Html5QrcodeScanner` lets you implement an end to end scanner with few lines of code with the default user interface which allows scanning using the camera or selecting an image from the file system.\n\nYou can setup the scanner as follows:\n```js\nfunction onScanSuccess(decodedText, decodedResult) {\n  // handle the scanned code as you like, for example:\n  console.log(`Code matched = ${decodedText}`, decodedResult);\n}\n\nfunction onScanFailure(error) {\n  // handle scan failure, usually better to ignore and keep scanning.\n  // for example:\n  console.warn(`Code scan error = ${error}`);\n}\n\nlet html5QrcodeScanner = new Html5QrcodeScanner(\n\t\"reader\", { fps: 10, qrbox: 250 }, /* verbose= */ false);\nhtml5QrcodeScanner.render(onScanSuccess, onScanFailure);\n```\n\n### Pro Mode - if you want to implement your own user interface\nYou can use `Html5Qrcode` class to set up your QR code scanner (with your own user interface) and allow users to scan QR codes using the camera or by choosing an image file in the file system or native cameras in smartphones.\n\nYou can use the following APIs to `fetch camera`, `start` scanning and `stop` scanning.\n\n#### For using inline QR Code scanning with Webcam or Smartphone camera\n\n##### Start Scanning\nTo get a list of supported cameras, query it using static method `Html5Qrcode.getCameras()`. This method returns a `Promise` with a list of devices supported in format `{ id: \"id\", label: \"label\" }`. \n```js\n// This method will trigger user permissions\nHtml5Qrcode.getCameras().then(devices => {\n  /**\n   * devices would be an array of objects of type:\n   * { id: \"id\", label: \"label\" }\n   */\n  if (devices && devices.length) {\n    var cameraId = devices[0].id;\n    // .. use this to start scanning.\n  }\n}).catch(err => {\n  // handle err\n});\n```\n\n**Important**: Note that this method will trigger user permission if the user has not granted it already. \n> Warning: Direct access to the camera is a powerful feature. It requires consent from the user, and your site MUST be on a secure origin (HTTPS).\n> \n> Warning: Asking for access to the camera on page load will result in most of your users rejecting access to it. [More info](https://developers.google.com/web/fundamentals/media/capturing-images)\n\nOnce you have the camera id from `device.id`, start camera using `Html5Qrcode#start(..)`. This method returns a `Promise` with Qr code scanning initiation.\n```js\nconst html5QrCode = new Html5Qrcode(/* element id */ \"reader\");\nhtml5QrCode.start(\n  cameraId, \n  {\n    fps: 10,    // Optional, frame per seconds for qr code scanning\n    qrbox: 250  // Optional, if you want bounded box UI\n  },\n  (decodedText, decodedResult) => {\n    // do something when code is read\n  },\n  (errorMessage) => {\n    // parse error, ignore it.\n  })\n.catch((err) => {\n  // Start failed, handle it.\n});\n```\n\n> You can optionally set another argument in constructor called `verbose` to print all logs to console\n\n```js\nconst html5QrCode = new Html5Qrcode(\"reader\", /* verbose= */ true);\n```\n\n##### Scanning without cameraId\nIn mobile devices you may want users to directly scan the QR code using the back camera or the front camera for some use cases. For such cases you can avoid using the exact camera device id that you get from `Html5Qrcode.getCameras()`. The `start()` method allows passing constraints in place of camera device id similar to [html5 web API syntax](https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices/getUserMedia#Syntax). You can start scanning like mentioned in these examples:\n\n```js\nconst html5QrCode = new Html5Qrcode(\"reader\");\nconst qrCodeSuccessCallback = (decodedText, decodedResult) => {\n    /* handle success */\n};\nconst config = { fps: 10, qrbox: 250 };\n\n// If you want to prefer front camera\nhtml5QrCode.start({ facingMode: \"user\" }, config, qrCodeSuccessCallback);\n\n// If you want to prefer back camera\nhtml5QrCode.start({ facingMode: \"environment\" }, config, qrCodeSuccessCallback);\n\n// Select front camera or fail with `OverconstrainedError`.\nhtml5QrCode.start({ facingMode: { exact: \"user\"} }, config, qrCodeSuccessCallback);\n\n// Select back camera or fail with `OverconstrainedError`.\nhtml5QrCode.start({ facingMode: { exact: \"environment\"} }, config, qrCodeSuccessCallback);\n```\n\nPassing the `cameraId` (recommended appraoch) is similar to\n```js\nhtml5QrCode.start({ deviceId: { exact: cameraId} }, config, qrCodeSuccessCallback);\n```\n\n##### Stop Scanning\n\nTo stop using camera and thus stop scanning, call `Html5Qrcode#stop()` which returns a `Promise` for stopping the video feed and scanning.\n```js\nhtml5QrCode.stop().then((ignore) => {\n  // QR Code scanning is stopped.\n}).catch((err) => {\n  // Stop failed, handle it.\n});\n```\n\n> Note that the class is stateful and `stop()` should be called to properly tear down the video and camera objects safely after calling `start()` when the scan is over or the user intend to move on. `stop()` will stop the video feed on the viewfinder.\n\n#### For QR Code scanning using local files or inbuild camera on Smartphones\n| Selector in Android | Selector in IOS|\n|------|-------|\n| Taken on Pixel 3, Google Chrome<br><img src=\"./assets/selector_android.png\" width=\"300px\"> |  Taken on iPhone 7, Google Chrome<br><img src=\"./assets/selector_iphone.jpg\" width=\"300px\"> |\n\nYou can alternatively leverage QR Code scanning for local files on the device or default camera on the device. It works similar to inline QR Code scanning.\n\nDefine the HTML container and import the javascript library as mentioned above\n```html\n<div id=\"reader\" width=\"600px\" height=\"600px\"></div>\n<script src=\"./minified/html5-qrcode.js\"></script>\n```\n> It's not mandatory to set the height and width of the HTML element. If provided, the library would try to honor it. If it's not set, the library would set a default width and derive the height based on the input image's aspect ratio.\n\nAdd an `Input` element for supporting file selection like this:\n```html\n<input type=\"file\" id=\"qr-input-file\" accept=\"image/*\">\n<!-- \n  Or add captured if you only want to enable smartphone camera, PC browsers will ignore it.\n-->\n\n<input type=\"file\" id=\"qr-input-file\" accept=\"image/*\" capture>\n```\nFind more information about this at [developers.google.com](https://developers.google.com/web/fundamentals/media/capturing-images).\n\nAnd in javascript code initialize the object and attach listener like this:\n```js\nconst html5QrCode = new Html5Qrcode(/* element id */ \"reader\");\n// File based scanning\nconst fileinput = document.getElementById('qr-input-file');\nfileinput.addEventListener('change', e => {\n  if (e.target.files.length == 0) {\n    // No file selected, ignore \n    return;\n  }\n\n  const imageFile = e.target.files[0];\n  // Scan QR Code\n  html5QrCode.scanFile(imageFile, true)\n  .then(decodedText => {\n    // success, use decodedText\n    console.log(decodedText);\n  })\n  .catch(err => {\n    // failure, handle it.\n    console.log(`Error scanning file. Reason: ${err}`)\n  });\n});\n\n// Note: Current public API `scanFile` only returns the decoded text. There is\n// another work in progress API (in beta) which returns a full decoded result of\n// type `QrcodeResult` (check interface in src/core.ts) which contains the\n// decoded text, code format, code bounds, etc.\n// Eventually, this beta API will be migrated to the public API.\n```\n\n> Note that inline scanning and file-based scanning are mutually exclusive at the moment. This means you can only use one of them at a time. I'll soon be adding support for the option to have both if the requirement comes in. If you want to use both, use `html5QrCode#clear()` method to clear the canvas.\n\n## Demo\n<img src=\"./assets/qr-code.png\" width=\"200px\"><br>\n_Scan this image or visit [blog.minhazav.dev/research/html5-qrcode.html](https://blog.minhazav.dev/research/html5-qrcode.html)_\n\n### For more information\nCheck these articles on how to use this library:\n<!-- TODO(mebjas) Mirgate this link to blog.minhazav.dev -->\n-   [QR and barcode scanner using HTML and Javascript](https://minhazav.medium.com/qr-and-barcode-scanner-using-html-and-javascript-2cdc937f793d)\n-   [HTML5 QR Code scanning - launched v1.0.1 without jQuery dependency and refactored Promise based APIs](https://blog.minhazav.dev/HTML5-QR-Code-scanning-launched-v1.0.1/).\n-   [HTML5 QR Code scanning with javascript - Support for scanning the local file and using default camera added (v1.0.5)](https://blog.minhazav.dev/HTML5-QR-Code-scanning-support-for-local-file-and-default-camera/)\n\n## Screenshots\n![screenshot](assets/screen.gif)<br>\n_Figure: Screenshot from Google Chrome running on Macbook Pro_\n\n## Documentation\nFollowing methods are available in this library (typescript definition)\n\n```ts\n/** Camera Device interface. */\ninterface CameraDevice {\n  id: string;\n  label: string;\n}\n\n/**\n * Code formats supported by this library.\n */\nenum Html5QrcodeSupportedFormats {\n  QR_CODE = 0,\n  AZTEC,\n  CODABAR,\n  CODE_39,\n  CODE_93,\n  CODE_128,\n  DATA_MATRIX,\n  MAXICODE,\n  ITF,\n  EAN_13,\n  EAN_8,\n  PDF_417,\n  RSS_14,\n  RSS_EXPANDED,\n  UPC_A,\n  UPC_E,\n  UPC_EAN_EXTENSION,\n}\n\n/** Format of detected code. */\nclass QrcodeResultFormat {\n    public readonly format: Html5QrcodeSupportedFormats;\n    public readonly formatName: string;\n}\n\n/** Detailed scan result. */\ninterface QrcodeResult {\n    /** Decoded text. */\n    text: string;\n\n    /** Format that was successfully scanned. */\n    format?: QrcodeResultFormat,\n}\n\n/** QrCode result object. */\ninterface Html5QrcodeResult {\n    decodedText: string;\n    result: QrcodeResult;\n}\n\n/** Type for a callback for a successful code scan. */\ntype QrcodeSuccessCallback\n  = (decodedText: string, result: Html5QrcodeResult) => void;\n\n/** Type for a callback for failure during code scan. */\ntype QrcodeErrorCallback\n  = (errorMessage: string, error: Html5QrcodeError) => void;\n\n/**\n * Interface for configuring {@class Html5Qrcode} class instance.\n */\ninterface Html5QrcodeConfigs {\n  /**\n   * Array of formats to support of type {@type Html5QrcodeSupportedFormats}.\n   */\n  formatsToSupport: Array<Html5QrcodeSupportedFormats> | undefined;\n}\n\n/** Configuration for creating {@class Html5Qrcode}. */\ninterface Html5QrcodeFullConfig extends Html5QrcodeConfigs {\n  /**\n   * If true, all logs would be printed to console. False by default.\n   */\n  verbose: boolean | undefined;\n}\n\ninterface Html5QrcodeCameraScanConfig {\n  /**\n   * Optional, Expected framerate of QR code scanning. example { fps: 2 } means the\n   * scanning would be done every 500 ms.\n   */\n  fps: number | undefined;\n\n  /**\n   * Optional, width of scanning region box, this should be smaller than the\n   * width and height of the full region.\n   * This would make the scanner look like this:\n   *          ----------------------\n   *          |********************|\n   *          |******,,,,,,,,,*****|      <--- shaded region\n   *          |******|       |*****|      <--- non shaded region would be\n   *          |******|       |*****|          used for QR code scanning.\n   *          |******|_______|*****|\n   *          |********************|\n   *          |********************|\n   *          ----------------------\n   */\n  qrbox?: number | undefined;\n\n  /**\n   * Optional, Desired aspect ratio for the video feed. Ideal aspect ratios\n   * are 4:3 or 16:9. Passing very wrong aspect ratio could lead to video feed\n   * not showing up.\n   */\n  aspectRatio?: number | undefined;\n\n  /**\n   * Optional, if {@code true} flipped QR Code won't be scanned. Only use this\n   * if you are sure the camera cannot give mirrored feed if you are facing\n   * performance constraints.\n   */\n  disableFlip?: boolean | undefined;\n\n  /*\n   * Optional, @beta(this config is not well supported yet).\n   *\n   * Important: When passed this will override other parameters like\n   * 'cameraIdOrConfig' or configurations like 'aspectRatio'.\n   * 'videoConstraints' should be of type {@code MediaTrackConstraints} as\n   * defined in\n   * https://developer.mozilla.org/en-US/docs/Web/API/MediaTrackConstraints\n   * and is used to specify a variety of video or camera controls like:\n   * aspectRatio, facingMode, frameRate, etc.\n   */\n  videoConstraints?: MediaTrackConstraints | undefined;\n}\n\n/**\n * Interface for controlling different aspects of {@class Html5QrcodeScanner}.\n */\ninterface Html5QrcodeScannerConfig\n  extends Html5QrcodeCameraScanConfig, Html5QrcodeConfigs {};\n\nclass Html5Qrcode {\n  /**\n   * Returns a Promise with a list of all cameras supported by the device.\n   */\n  static getCameras(): Array<CameraDevice> // Returns a Promise\n\n  /**\n   * Initialize QR Code scanner.\n   * \n   * @param elementId - Id of the HTML element.\n   * @param verbose - optional configuration object\n   */\n  constructor(elementId: string, config:  Html5QrcodeFullConfig | undefined) {}\n\n  /**\n   * Start scanning QR codes or barcodes for a given camera.\n   * \n   * @param cameraIdOrConfig Identifier of the camera, it can either be the\n   *  camera id retrieved from {@code Html5Qrcode#getCameras()} method or\n   *  object with facing mode constraint.\n   * @param configuration Extra configurations to tune the code scanner.\n   * @param qrCodeSuccessCallback Callback called when an instance of a QR\n   * code or any other supported bar code is found.\n   * @param qrCodeErrorCallback Callback called in cases where no instance of\n   * QR code or any other supported bar code is found.\n   */\n  start(\n    cameraIdOrConfig: Html5QrcodeIdentifier,\n    configuration: Html5QrcodeCameraScanConfig | undefined,\n    qrCodeSuccessCallback: QrcodeSuccessCallback | undefined,\n    qrCodeErrorCallback: QrcodeErrorCallback | undefined,\n  ): Promise<null> {}ass\n\n  /**\n   * Stops streaming QR Code video and scanning. \n   */\n  stop(): Promise<void> {}\n\n  /**\n   * Scans an Image File for QR Code.\n   *\n   * This feature is mutually exclusive to camera-based scanning, you should\n   * call stop() if the camera-based scanning was ongoing.\n   *\n   * @param imageFile a local file with Image content.\n   * @param showImage if true, the Image will be rendered on given element.\n   *\n   * @returns Promise with decoded QR code string on success.\n   */\n  scanFile(\n    imageFile: File,\n    /* default=true */ showImage: boolean | undefined): Promise<string> {}\n\n  /**\n   * Clears the existing canvas.\n   * \n   * Note: in case of ongoing web-cam based scan, it needs to be explicitly\n   * closed before calling this method, else it will throw an exception.\n   */\n  clear(): void {}  // Returns void\n}\n\nclass Html5QrcodeScanner {\n  /**\n   * Creates an instance of this class.\n   *\n   * @param elementId Id of the HTML element.\n   * @param config Extra configurations to tune the code scanner.\n   * @param verbose - If true, all logs would be printed to console. \n   */\n  constructor(\n    elementId: string,\n    config: Html5QrcodeScannerConfig | undefined,\n    verbose: boolean | undefined) {}\n\n  /**\n   * Renders the User Interface.\n   * \n   * @param qrCodeSuccessCallback Callback called when an instance of a QR\n   * code or any other supported bar code is found.\n   * @param qrCodeErrorCallback optional callback called in cases where no\n   * instance of QR code or any other supported bar code is found.\n   */\n  render(\n    qrCodeSuccessCallback: QrcodeSuccessCallback,\n    qrCodeErrorCallback: QrcodeErrorCallback | undefined) {}\n\n  /** Removes the QR Code scanner. */\n  clear(): Promise<void>  {}\n}\n```\n\n### Extra optional `configuration` in `start()` method\nConfiguration object that can be used to configure both the scanning behavior and the user interface (UI). Most of the fields have default properties that will be used unless a different value is provided. If you do not want to override anything, you can just pass in an empty object `{}`.\n\n#### `fps` - Integer, Example = 10\nA.K.A frame per second, the default value for this is 2 but it can be increased to get faster scanning. Increasing too high value could affect performance. Value `>1000` will simply fail.\n\n#### `qrbox` - Integer, Example = 250\nUse this property to limit the region of the viewfinder you want to use for scanning. The rest of the viewfinder would be shaded. For example, by passing config `{ qrbox : 250 }`, the screen will look like:\n\n<img src=\"./assets/screen.gif\">\n\n#### `aspectRatio` - Float, Example 1.777778 for 16:9 aspect ratio\nUse this property to render the video feed in a certain aspect ratio. Passing a nonstandard aspect ratio like `100000:1` could lead to the video feed not even showing up. Ideal values can be:\n| Value | Aspect Ratio | Use Case |\n| ----- | ------------ | -------- |\n|1.333334 | 4:3 | Standard camera aspect ratio |\n|1.777778 | 16:9 | Fullscreen, cinematic |\n|1.0 | 1:1 | Square view |\n\nIf you do not pass any value, the whole viewfinder would be used for scanning. \n**Note**: this value has to be smaller than the width and height of the `QR code HTML element`.\n\n#### `disableFlip` - Boolean (Optional), default = false\nBy default, the scanner can scan for horizontally flipped QR Codes. This also enables scanning QR code using the front camera on mobile devices which are sometimes mirrored. This is `false` by default and I recommend changing this only if:\n-   You are sure that the camera feed cannot be mirrored (Horizontally flipped)\n-   You are facing performance issues with this enabled.\n\nHere's an example of a normal and mirrored QR Code\n| Normal QR Code | Mirrored QR Code |\n| ----- | ---- |\n| <img src=\"./assets/qr-code.png\" width=\"200px\"> | <img src=\"./assets/qr-code-flipped.png\" width=\"200px\"><br> |\n\n### Scanning only specific formats\nBy default, both camera stream and image files are scanned against all the\nsupported code formats.  Both `Html5QrcodeScanner` and `Html5Qrcode` classes can\n be configured to only support a subset of supported formats. Supported formats\nare defined in\n[enum Html5QrcodeSupportedFormats](https://github.com/mebjas/html5-qrcode/blob/master/src/core.ts#L14).\n\n```ts\nenum Html5QrcodeSupportedFormats {\n  QR_CODE = 0,\n  AZTEC,\n  CODABAR,\n  CODE_39,\n  CODE_93,\n  CODE_128,\n  DATA_MATRIX,\n  MAXICODE,\n  ITF,\n  EAN_13,\n  EAN_8,\n  PDF_417,\n  RSS_14,\n  RSS_EXPANDED,\n  UPC_A,\n  UPC_E,\n  UPC_EAN_EXTENSION,\n}\n```\n\nI recommend using this only if you need to explicitly omit support for certain\nformats or want to reduce the number of scans done per second for performance\nreasons.\n\n#### Scanning only QR code with `Html5Qrcode`\n```js\nconst html5QrCode = new Html5Qrcode(\n  \"reader\", { formatsToSupport: [ Html5QrcodeSupportedFormats.QR_CODE ] });\nconst qrCodeSuccessCallback = (decodedText, decodedResult) => {\n    /* handle success */\n};\nconst config = { fps: 10, qrbox: 250 };\n\n// If you want to prefer front camera\nhtml5QrCode.start({ facingMode: \"user\" }, config, qrCodeSuccessCallback);\n```\n\n#### Scaning only QR code and UPC codes with `Html5QrcodeScanner`\n```js\nfunction onScanSuccess(decodedText, decodedResult) {\n  // Handle the scanned code as you like, for example:\n  console.log(`Code matched = ${decodedText}`, decodedResult);\n}\n\nconst formatsToSupport = [\n  Html5QrcodeSupportedFormats.QR_CODE,\n  Html5QrcodeSupportedFormats.UPC_A,\n  Html5QrcodeSupportedFormats.UPC_E,\n  Html5QrcodeSupportedFormats.UPC_EAN_EXTENSION,\n];\nconst html5QrcodeScanner = new Html5QrcodeScanner(\n  \"reader\",\n  { fps: 10, qrbox: 250, formatsToSupport: formatsToSupport },\n  /* verbose= */ false);\nhtml5QrcodeScanner.render(onScanSuccess);\n```\n\n## Experimental features\nThe library now supports some experimental features which are supported in the\nlibrary but not recommended for production usage either due to limited testing\ndone or limited compatibility for underlying APIs used. Read more about it [here](/experimental.md).\nSome of the experimental features include:\n-   [Support for BarcodeDetector javascript API](/experimental.md)\n\n## How to modify and build\n1.  Code changes should only be made to [/src](./src) only.\n\n2.  Run `npm install` to install all dependencies.\n\n3.  Run `npm run-script build` to build javascript output. The output javascript distribution is built to [/dist/html5-qrcode.min.js](./dist/html5-qrcode.min.js). If you are developing on Windows OS, run `npm run-script build-windows`.\n\n4.  Testing\n    -   Run `npm test`\n    -   Run the tests before sending a pull request, all tests should run.\n    -   Please add tests for new behaviors sent in PR.\n\n5.  Send a pull request\n    -   Include code changes only to `./src`. **Do not change `./dist` manually.**\n    -   In the pull request add a comment like\n\t  ```text\n\t  @all-contributors please add @mebjas for this new feature or tests\n\t  ```\n\t  For calling out your contributions - the bot will update the contributions file.\n    -   Code will be built & published by the author in batches.\n\n## Credits\nThe decoder used for the QRcode reading is from `Zxing-js` https://github.com/zxing-js/library<br>\n",
    "licenseText": "                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright [2020] [MINHAZ <minhazav@gmail.com>]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/html5-qrcode/-/html5-qrcode-2.0.11.tgz#2cc5f63e767be53dd6c6d56b6c4f180a12aa8075",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/html5-qrcode/-/html5-qrcode-2.0.11.tgz",
    "hash": "2cc5f63e767be53dd6c6d56b6c4f180a12aa8075",
    "integrity": "sha512-cCrVOK2yJGPGSTjchqRhkBJIrxvojEwF/pDKLNxmTH1wiAsVc61ZnIqyApIVyNfn5dKRFax70Qpr7pZwbUNiUw==",
    "registry": "npm",
    "packageName": "html5-qrcode",
    "cacheIntegrity": "sha512-cCrVOK2yJGPGSTjchqRhkBJIrxvojEwF/pDKLNxmTH1wiAsVc61ZnIqyApIVyNfn5dKRFax70Qpr7pZwbUNiUw== sha1-LMX2PnZ75T3WxtVrbE8YChKqgHU="
  },
  "registry": "npm",
  "hash": "2cc5f63e767be53dd6c6d56b6c4f180a12aa8075"
}