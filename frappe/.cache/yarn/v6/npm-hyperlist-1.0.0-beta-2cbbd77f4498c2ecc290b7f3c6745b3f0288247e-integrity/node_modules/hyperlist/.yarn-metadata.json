{
  "manifest": {
    "name": "hyperlist",
    "version": "1.0.0-beta",
    "description": "A performant virtual scrolling list library",
    "devDependencies": {
      "babel-cli": "^6.8.0",
      "babel-plugin-add-module-exports": "^0.2.1",
      "babel-preset-es2015": "^6.6.0",
      "babel-register": "^6.8.0",
      "babelify": "^7.2.0",
      "browserify": "^13.0.0",
      "derequire": "^2.0.3",
      "faker": "^3.1.0",
      "istanbul": "1.0.0-alpha.2",
      "mocha": "^2.4.5",
      "moment": "^2.13.0",
      "react": "^15.1.0",
      "react-dom": "^15.1.0",
      "react-faux-dom": "^2.5.0",
      "standard": "^10.0.2",
      "stringdom": "jugglinmike/stringdom#ec8f199df36157330148b7a2e64b38c1f5008702",
      "watchify": "^3.7.0"
    },
    "keywords": [
      "list",
      "buffer",
      "render",
      "html",
      "infinite",
      "virtual",
      "performance",
      "dom"
    ],
    "main": "dist/hyperlist.js",
    "bugs": {
      "url": "https://github.com/tbranyen/hyperlist/issues"
    },
    "repository": {
      "type": "git",
      "url": "git://github.com/tbranyen/hyperlist.git"
    },
    "scripts": {
      "build-faux-dom": "browserify -s ReactFauxDOM -r react-faux-dom -o dist/react-faux-dom.js",
      "build": "browserify -t [ babelify ] -s HyperList lib/index.js | derequire > dist/hyperlist.js",
      "watch": "watchify -t [ babelify ] -s HyperList lib/index.js -o 'derequire > dist/hyperlist.js' -v",
      "test": "standard --env mocha && babel-node ./node_modules/istanbul/lib/cli.js cover _mocha -- -R spec"
    },
    "author": {
      "name": "Tim Branyen",
      "url": "@tbranyen"
    },
    "contributors": [
      {
        "name": "Sergi Mansilla",
        "email": "sergi.mansilla@gmail.com"
      }
    ],
    "license": "MIT",
    "_registry": "npm",
    "_loc": "/home/frappe/.cache/yarn/v6/npm-hyperlist-1.0.0-beta-2cbbd77f4498c2ecc290b7f3c6745b3f0288247e-integrity/node_modules/hyperlist/package.json",
    "readmeFilename": "README.md",
    "readme": "## HyperList\n\n[![Build Status](https://travis-ci.org/tbranyen/hyperlist.svg?branch=master)](https://travis-ci.org/tbranyen/hyperlist)\n[![JavaScript Style Guide](https://img.shields.io/badge/code_style-standard-brightgreen.svg)](https://standardjs.com)\n\nThis is a simple component that can be dropped into any JavaScript application\nand provide a virtual scrolling area that is highly performant and lightweight.\nWith zero dependencies and well under 300 lines of code sans comments, it is\neasy to understand and use.\n\n## Demo\n\n![Demo](/example.gif?raw=true)\n\n- [Basic example](http://tbranyen.github.io/hyperlist/examples/basic.html)\n- [React integration](http://tbranyen.github.io/hyperlist/examples/react-example.html)\n- [Bind to input range](http://tbranyen.github.io/hyperlist/examples/bind-scroll-to-range.html)\n- [2 Million Rows](http://tbranyen.github.io/hyperlist/examples/2-million-rows.html)\n  - May take a minute to generate the data before anything shows up...\n- [Large Chat History](http://tbranyen.github.io/hyperlist/examples/large-chat-history.html)\n  - May take a minute to generate the data before anything shows up...\n\n## Installation\n\n```sh\nnpm install hyperlist\n```\n\nOf course it can also just be added to any JavaScript project since it consists\nof a single JavaScript file.\n\n## Usage\n\nBelow are full code examples containing typical usage. Documentation\nsupplements the code comments so hopefully everything makes sense!\n\n#### Invocation\n\nHow to invoke an instance of HyperList\n\n``` javascript\n// Using create\nconst list = HyperList.create(document.body, requiredOptions);\n\n// Using new\nconst list = new HyperList(document.body, requiredOptions);\n```\n\n#### Required Options\n\nThese configuration options are not optional. So set them to avoid runtime\nerrors. You can mutate them by setting a new object in the refresh method.\n\n``` javascript\nlist.refresh(element, newConfig);\n```\n\n- `height` The value that is used on the container, if you use a string, it\n  will read the offsetHeight from the container after setting the css. This way\n  you can specify any unit and have it calculate correctly.\n- `itemHeight` A single value that is the height for every single element in\n  the list.\n- `total` The number of items in the list.\n- `generate` A function that is called with the index to render. You return an\n  element to render in that position.\n\n#### Basic example\n\nA simple example with just the required options.\n\n``` javascript\n// Create a container element or find one that already exists in the DOM.\nconst container = document.createElement('div');\n\n// Pass the container element and configuration to the HyperList constructor.\n// You can optionally use the create method if you prefer to avoid `new`.\nconst list = HyperList.create(container, {\n  // Default to 100% width. And specify the container to be 300px tall, sets\n  // this as an inline style.\n  height: 300,\n\n  // All items must be the exact same height currently. Although since there is\n  // a generate method, in the future this should be configurable.\n  itemHeight: 30,\n\n  // Specify the total amount of items to render the virtual height.\n  total: 10000,\n\n  // Wire up the data to the index. The index is then mapped to a Y position\n  // in the container.\n  generate(index) {\n    const el = document.createElement('div');\n    el.innerHTML = `ITEM ${index + 1}`;\n    return el;\n  },\n});\n\n// Attach the container to the DOM.\ndocument.body.appendChild(container);\n```\n\n#### Optional Options\n\nThese configuration options are totally optional. So set them when you need to\ngo beyond the defaults and required options.\n\n- `reverse` This will render items from the bottom of the container instead of\n  the top. This works much better for chat and notifications experiences. This\n  option will automatically scroll the container to the bottom every time the\n  refresh method is called and during instantiation.\n- `scrollerTagName` Is a TR by default which works fine in most cases. If you\n  need a different element tag name, specify it here.\n- `total` The number of items in the list.\n- `rowClassName` Any custom classes to add to the row.\n- `overrideScrollPosition` Pull the scrollTop value from somewhere else, this\n  allows for binding range elements to the scroll position.\n- `applyPatch` Is called with the container element and the DocumentFragment\n  which contains all the items being added. You can implement Virtual DOM\n  patching with this hook.\n- `afterRender` - Triggered after `applyPatch` has returned.\n- `scroller` - Specify an element to be in the place of the scroller.\n- `useFragment` - Determines if a fragment is used internally or not, defaults\n  to true.\n\n#### Variable height items\n\nWhen you are rendering a list of elements that have variable heights you may\nspecific an object as the `generate` callback's return value that contains\nthe signature: `{ element: domNode, height: 100 }`.\n\nFor example:\n\n``` js\n// Wire up the data to the index. The index is then mapped to a Y position\n// in the container, using some height.\ngenerate(index) {\n  const el = document.createElement('div');\n  el.innerHTML = `ITEM ${index + 1}`;\n  return { element: el, height: Math.random() * 1000 };\n}\n```\n\nYou can also find a [working implementation in the examples directory](./examples/dynamic-height.html).\n\n#### Advanced example\n\nAn example with all the options, mounted to the entire page that refreshes when\nthe browser resizes.\n\n``` javascript\n// Create a container element or find one that already exists in the DOM.\nconst container = document.createElement('div');\n\nconst config = {\n  width: '100%',\n  height: window.innerHeight,\n\n  // All items must be the exact same height currently. Although since there is\n  // a generate method, in the future this should be configurable.\n  itemHeight: 30,\n\n  // Specify the total amount of items to render the virtual height.\n  total: 10000,\n\n  // Reverse the list to start from the bottom instead of the top.\n  reverse: true,\n  \n  // Customize the scroller tag name, defaults to tr.\n  scrollerTagName: 'tr',\n\n  // Or if you want, you can specify an element which has higher precedence.\n  scroller: document.createElement('tr'),\n\n  // Customize the virtual row class, defaults to vrow.\n  rowClassName: 'vrow',\n\n  // Whether or not childNodes are built up in an Array or Document Fragment.\n  useFragment: false,\n\n  // By default HyperList will determine scroll offset from the container\n  // element. You can override this lookup by using this hook.\n  overrideScrollPosition() {\n    return document.body.scrollTop;\n  },\n\n  // Wire up the data to the index. The index is then mapped to a Y position\n  // in the container.\n  generate(index) {\n    const el = document.createElement('div');\n    el.innerHTML = `ITEM ${index + 1}`;\n    return el;\n  },\n\n  // Triggerd after any items have been added into the DOM.\n  afterRender() {\n    console.log('Rendered some items');\n  },\n\n  // If you want to do some custom rendering with the container element and\n  // the fragment, you can specify this method. The contents of this function\n  // are the defaults. Look at examples/diffhtml.html for an example of using\n  // this method with a Virtual DOM.\n  applyPatch(element, fragment) {\n    element.innerHTML = '';\n    element.appendChild(fragment);\n  },\n};\n\n// Pass the container element and configuration to the HyperList constructor.\n// You can optionally use the create method if you prefer to avoid `new`.\nconst list = HyperList.create(container, config);\n\nwindow.onresize = () => {\n  config.height = window.innerHeight;\n  list.refresh(container, config);\n};\n\n// Attach the container to the DOM.\ndocument.body.appendChild(container);\n```\n\n## Contributing\n\nPRs are welcome, please ensure the tests pass and the code looks like the\nsurrounding style:\n\n``` sh\nnpm test\n```\n\n## Credits\n\nThis project is a fork of the existing (unmaintained) project:\nhttps://github.com/sergi/virtual-list\n\nThis README section, the LICENSE, and package.json will remain to ensure\nproper credit is always extended.\n",
    "licenseText": "The MIT License (MIT)\n\nOriginal Copyright (C) 2013 Sergi Mansilla\nCopyright (C) 2017 Tim Branyen\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the 'Software'), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL\nTHE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/hyperlist/-/hyperlist-1.0.0-beta.tgz#2cbbd77f4498c2ecc290b7f3c6745b3f0288247e",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/hyperlist/-/hyperlist-1.0.0-beta.tgz",
    "hash": "2cbbd77f4498c2ecc290b7f3c6745b3f0288247e",
    "integrity": "sha1-LLvXf0SYwuzCkLfzxnRbPwKIJH4=",
    "registry": "npm",
    "packageName": "hyperlist",
    "cacheIntegrity": "sha512-CTnrVDxJ/APF/d9Bo1M8EWrcgZRw6bWrCu4BN0e4+JwUidCIlhooHyRdqO4XOa4irwNF6LaIcWQlBfVOAuGdrQ== sha1-LLvXf0SYwuzCkLfzxnRbPwKIJH4="
  },
  "registry": "npm",
  "hash": "2cbbd77f4498c2ecc290b7f3c6745b3f0288247e"
}